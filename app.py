import streamlit as st
import plotly.graph_objects as go
import numpy as np
import pandas as pd

# „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„ÅÆ„Åü„ÇÅ„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥Áä∂ÊÖã„ÅÆÂàùÊúüÂåñ
if 'page' not in st.session_state:
    st.session_state.page = 'welcome'  # welcome, test, results
if 'current_question' not in st.session_state:
    st.session_state.current_question = 0
if 'answers' not in st.session_state:
    st.session_state.answers = [None] * 10
if 'language' not in st.session_state:
    st.session_state.language = None  # 'ja' or 'en'

# Ë®ÄË™ûÂà•„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Ç≥„É≥„ÉÜ„É≥„ÉÑ
CONTENT = {
    'ja': {
        'title': "üéØ ÊÄßÊ†ºÁâπÊÄßË®∫Êñ≠„ÉÜ„Çπ„Éà - Ten Item Personality Inventory(TIPI)",
        'welcome_text': """
        ### „Çà„ÅÜ„Åì„ÅùÔºÅ
        
        „Åì„ÅÆ„ÉÜ„Çπ„Éà„Åß„ÅØ„ÄÅ„ÅÇ„Å™„Åü„ÅÆÊÄßÊ†ºÁâπÊÄß„Çí‰ª•‰∏ã„ÅÆ5„Å§„ÅÆË¶≥ÁÇπ„Åã„ÇâÂàÜÊûê„Åó„Åæ„ÅôÔºö
        
        1. Â§ñÂêëÊÄß - Á§æ‰∫§ÊÄß„ÇÑÊ¥ªÂãïÊÄß„ÅÆÂ∫¶Âêà„ÅÑ
        2. ÂçîË™øÊÄß - ‰ªñËÄÖ„Å∏„ÅÆÊÄù„ÅÑ„ÇÑ„Çä„ÇÑÂçîÂäõ„ÅÆÂ∫¶Âêà„ÅÑ
        3. Ë™†ÂÆüÊÄß - Ë®àÁîªÊÄß„ÇÑË≤¨‰ªªÊÑü„ÅÆÂ∫¶Âêà„ÅÑ
        4. Á•ûÁµåÁóáÂÇæÂêë - ‰∏çÂÆâ„ÇÑÁ∑äÂºµ„ÅÆÂ∫¶Âêà„ÅÑ
        5. ÈñãÊîæÊÄß - Êñ∞„Åó„ÅÑÁµåÈ®ì„Å∏„ÅÆËààÂë≥„ÇÑÂâµÈÄ†ÊÄß„ÅÆÂ∫¶Âêà„ÅÑ
        
        - ÊâÄË¶ÅÊôÇÈñìÔºöÁ¥Ñ3ÂàÜ
        - Ë≥™ÂïèÊï∞Ôºö10Âïè
        - ÂõûÁ≠îÊñπÊ≥ïÔºö7ÊÆµÈöéË©ï‰æ°
        
        ‚Äª „Åì„ÅÆ„ÉÜ„Çπ„Éà„ÅØ‰∏ÄËà¨ÁöÑ„Å™ÊÄßÊ†ºÁâπÊÄß„ÅÆÂÇæÂêë„ÇíÊääÊè°„Åô„Çã„Åü„ÇÅ„ÅÆ„ÇÇ„ÅÆ„Åß„Åô„ÄÇ
        """,
        'start_button': "„ÉÜ„Çπ„Éà„ÇíÈñãÂßã„Åô„Çã",
        'questions': [
            "ÁßÅ„ÅØÊ¥ªÁô∫„ÄÅÂ§ñÂêëÁöÑ„Å†„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØ‰ªñ‰∫∫„Å´‰∏çÊ∫Ä„Çí„ÇÇ„Å°„ÄÅ„ÇÇ„ÇÅ„Åî„Å®„ÇíËµ∑„Åì„Åó„ÇÑ„Åô„ÅÑ„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØ„Åó„Å£„Åã„Çä„Åó„Å¶„ÅÑ„Å¶„ÄÅËá™ÂàÜ„Å´Âé≥„Åó„ÅÑ„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØÂøÉÈÖçÊÄß„Åß„ÄÅ„ÅÜ„Çç„Åü„Åà„ÇÑ„Åô„ÅÑ„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØÊñ∞„Åó„ÅÑ„Åì„Å®„ÅåÂ•Ω„Åç„Åß„ÄÅÂ§â„Çè„Å£„ÅüËÄÉ„Åà„Çí„ÇÇ„Å§„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØ„Å≤„Åã„Åà„ÇÅ„Åß„ÄÅ„Åä„Å®„Å™„Åó„ÅÑ„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØ‰∫∫„Å´Ê∞ó„Çí„Å§„Åã„ÅÜ„ÄÅ„ÇÑ„Åï„Åó„ÅÑ‰∫∫Èñì„Å†„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØ„Å†„Çâ„Åó„Å™„Åè„ÄÅ„ÅÜ„Å£„Åã„Çä„Åó„Å¶„ÅÑ„Çã„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØÂÜ∑Èùô„Åß„ÄÅÊ∞óÂàÜ„ÅåÂÆâÂÆö„Åó„Å¶„ÅÑ„Çã„Å®ÊÄù„ÅÜ„ÄÇ",
            "ÁßÅ„ÅØÁô∫ÊÉ≥Âäõ„Å´Ê¨†„Åë„Åü„ÄÅÂπ≥Âá°„Å™‰∫∫Èñì„Å†„Å®ÊÄù„ÅÜ„ÄÇ"
        ],
        'options': {
            1: "ÂÖ®„ÅèÈÅï„ÅÜ„Å®ÊÄù„ÅÜ",
            2: "„Åä„Åä„Çà„ÅùÈÅï„ÅÜ„Å®ÊÄù„ÅÜ",
            3: "Â∞ë„ÅóÈÅï„ÅÜ„Å®ÊÄù„ÅÜ",
            4: "„Å©„Å°„Çâ„Åß„ÇÇ„Å™„ÅÑ",
            5: "Â∞ë„Åó„Åù„ÅÜÊÄù„ÅÜ",
            6: "„Åæ„ÅÅ„Åæ„ÅÅ„Åù„ÅÜÊÄù„ÅÜ",
            7: "Âº∑„Åè„Åù„ÅÜÊÄù„ÅÜ"
        },
        'question_prefix': "Ë≥™Âïè",
        'select_answer': "„ÅÇ„Å™„Åü„ÅÆÂõûÁ≠î„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö",
        'prev_button': "Ââç„ÅÆË≥™Âïè",
        'next_button': "Ê¨°„ÅÆË≥™Âïè",
        'show_results': "ÁµêÊûú„ÇíË¶ã„Çã",
        'results_title': "üéâ „ÅÇ„Å™„Åü„ÅÆÊÄßÊ†ºÁâπÊÄßË®∫Êñ≠ÁµêÊûú",
        'detailed_interpretation': "üìä Ë©≥Á¥∞„Å™Ëß£Èáà",
        'your_score': "„ÅÇ„Å™„Åü„ÅÆ„Çπ„Ç≥„Ç¢",
        'diff_from_mean': "Âπ≥ÂùáÂÄ§„Å®„ÅÆÂ∑Æ",
        'evaluation': "Ë©ï‰æ°",
        'mean': "Âπ≥Âùá",
        'retry_button': "„ÉÜ„Çπ„Éà„Çí„ÇÇ„ÅÜ‰∏ÄÂ∫¶Âèó„Åë„Çã",
        'high': "È´ò„ÅÑ",
        'low': "‰Ωé„ÅÑ",
        'average': "Âπ≥ÂùáÁöÑ",
        'chart_your_score': "„ÅÇ„Å™„Åü„ÅÆ„Çπ„Ç≥„Ç¢",
        'chart_average': "Âπ≥ÂùáÂÄ§",
        'traits': {
            "Â§ñÂêëÊÄß": "Á§æ‰ºöÊÄß„ÇÑÊ¥ªÁô∫„Åï„ÄÅÂ§ñÁïå„Å∏„ÅÆËààÂë≥Èñ¢ÂøÉ„ÄÇ„Çπ„Ç≥„Ç¢„ÅåÈ´ò„ÅÑ„Å®‰ªñËÄÖ„Å®„ÅÆ‰∫§ÊµÅ„ÇÑ‰∫∫„Å®„ÅÆ„Åã„Åã„Çè„Çä„ÇíÂ•Ω„ÇÄ„Çø„Ç§„Éó„ÄÇ",
            "ÂçîË™øÊÄß": "‰ªñËÄÖ„Å∏„ÅÆÂÖ±ÊÑüÂäõ„ÇÑÊÄù„ÅÑ„ÇÑ„Çä„ÄÅÂçîË™øÊÄß„ÄÇ„Çπ„Ç≥„Ç¢„ÅåÈ´ò„ÅÑ„Å®ÂØæÁ´ã„ÇíÈÅø„Åë„ÄÅÂçîË™øÁöÑ„ÅßÊÄù„ÅÑ„ÇÑ„Çä„Åå„ÅÇ„Çã„Çø„Ç§„Éó„ÄÇ",
            "Ë™†ÂÆüÊÄß": "ÊÄùËÄÉ„ÇÑË°åÂãï„Çí„Ç≥„É≥„Éà„É≠„Éº„É´„Åô„ÇãÂäõ„ÄÅËâØÂøÉ„ÄÅË≤¨‰ªªÊÑü„ÅÆÂº∑„Åï„ÄÇ„Çπ„Ç≥„Ç¢„ÅåÈ´ò„ÅÑ„Å®ÁúüÈù¢ÁõÆ„ÅßË≤¨‰ªªÊÑü„ÅåÂº∑„Åè„ÄÅÈÅîÊàêÂäõ„Åå„ÅÇ„Çã„ÄÇ",
            "Á•ûÁµåÁóáÂÇæÂêë": "„Éç„Ç¨„ÉÜ„Ç£„ÉñÂà∫ÊøÄ„Å∏„ÅÆËÄêÊÄß„ÄÅÊÑüÊÉÖÁöÑ„Å™‰∏çÂÆâÂÆöÊÄß„ÄÇ„Çπ„Ç≥„Ç¢„ÅåÈ´ò„ÅÑ„Å®„Çπ„Éà„É¨„Çπ„ÇÑÁ∑äÂºµ„Å´Âº±„ÅÑÂÇæÂêë„ÄÇ",
            "ÈñãÊîæÊÄß": "Áü•ÁöÑ„ÄÅÁæéÁöÑ„ÄÅÊñáÂåñÁöÑ„Å´Êñ∞„Åó„ÅÑÁµåÈ®ì„Å∏„ÅÆÈñãÊîæÊÄß„ÇíÊ∏¨ÂÆö„ÄÇ„Çπ„Ç≥„Ç¢„ÅåÈ´ò„ÅÑ„Å®Áü•ÁöÑÂ•ΩÂ•áÂøÉ„ÅåÈ´ò„Åè„ÄÅÊÉ≥ÂÉèÂäõ„ÇÑËä∏Ë°ìÁöÑÈñ¢ÂøÉ„ÅåË±ä„Åã„ÄÇ"
        }
    },
    'en': {
        'title': "üéØ Personality Trait Test - Ten Item Personality Inventory(TIPI)",
        'welcome_text': """
        ### Welcome!
        
        This test analyses your personality traits across five dimensions:
        
        1. Extraversion - Level of sociability and activity
        2. Agreeableness - Level of empathy and cooperation
        3. Conscientiousness - Level of organization and responsibility
        4. Neuroticism - Level of emotional stability
        5. Openness - Level of curiosity and creativity
        
        - Time required: About 3 minutes
        - Number of questions: 10
        - Rating scale: 7 points
        
        Note: This test provides a general assessment of personality traits.
        """,
        'start_button': "Start Test",
        'questions': [
            "I see myself as extraverted, enthusiastic.",
            "I see myself as critical, quarrelsome.",
            "I see myself as dependable, self-disciplined.",
            "I see myself as anxious, easily upset.",
            "I see myself as open to new experiences, complex.",
            "I see myself as reserved, quiet.",
            "I see myself as sympathetic, warm.",
            "I see myself as disorganized, careless.",
            "I see myself as calm, emotionally stable.",
            "I see myself as conventional, uncreative."
        ],
        'options': {
            1: "Disagree strongly",
            2: "Disagree moderately",
            3: "Disagree a little",
            4: "Neither agree nor disagree",
            5: "Agree a little",
            6: "Agree moderately",
            7: "Agree strongly"
        },
        'question_prefix': "Question",
        'select_answer': "Select your answer:",
        'prev_button': "Previous",
        'next_button': "Next",
        'show_results': "Show Results",
        'results_title': "üéâ Your Personality Trait Results",
        'detailed_interpretation': "üìä Detailed Interpretation",
        'your_score': "Your Score",
        'diff_from_mean': "Difference from mean",
        'evaluation': "Evaluation",
        'mean': "Mean",
        'retry_button': "Take the Test Again",
        'high': "High",
        'low': "Low",
        'average': "Average",
        'chart_your_score': "Your Score",
        'chart_average': "Average",
        'traits': {
            "Extraversion": "Sociability and enthusiasm in external activities. High scorers tend to be outgoing and energetic.",
            "Agreeableness": "Empathy and warmth towards others. High scorers tend to be cooperative and considerate.",
            "Conscientiousness": "Organization and responsibility. High scorers tend to be disciplined and achievement-oriented.",
            "Neuroticism": "Emotional sensitivity and stability. High scorers tend to experience more stress and anxiety.",
            "Openness": "Curiosity and creativity. High scorers tend to be imaginative and interested in new experiences."
        }
    }
}

# ÁâπÊÄßÂêç„ÅÆË®ÄË™û„Éû„ÉÉ„Éî„É≥„Ç∞
TRAIT_NAMES = {
    'ja': {
        "Â§ñÂêëÊÄß": "Â§ñÂêëÊÄß",
        "ÂçîË™øÊÄß": "ÂçîË™øÊÄß",
        "Ë™†ÂÆüÊÄß": "Ë™†ÂÆüÊÄß",
        "Á•ûÁµåÁóáÂÇæÂêë": "Á•ûÁµåÁóáÂÇæÂêë",
        "ÈñãÊîæÊÄß": "ÈñãÊîæÊÄß"
    },
    'en': {
        "Â§ñÂêëÊÄß": "Extraversion",
        "ÂçîË™øÊÄß": "Agreeableness",
        "Ë™†ÂÆüÊÄß": "Conscientiousness",
        "Á•ûÁµåÁóáÂÇæÂêë": "Neuroticism",
        "ÈñãÊîæÊÄß": "Openness"
    }
}

def get_score_evaluation(score, mean, std):
    """„Çπ„Ç≥„Ç¢„ÅÆË©ï‰æ°„ÇíËøî„ÅôÈñ¢Êï∞"""
    lang = st.session_state.language
    if score > mean + std:
        return CONTENT[lang]['high'], "‚¨ÜÔ∏è"
    elif score < mean - std:
        return CONTENT[lang]['low'], "‚¨áÔ∏è"
    else:
        return CONTENT[lang]['average'], "‚û°Ô∏è"

# Â§ßÂ≠¶Áîü902‰∫∫„ÅÆÂπ≥ÂùáÂÄ§„Å®Ê®ôÊ∫ñÂÅèÂ∑Æ
population_stats = {
    "Â§ñÂêëÊÄß": {"mean": 7.83, "std": 2.97},
    "ÂçîË™øÊÄß": {"mean": 9.48, "std": 2.16},
    "Ë™†ÂÆüÊÄß": {"mean": 6.14, "std": 2.41},
    "ÈñãÊîæÊÄß": {"mean": 8.03, "std": 2.48},
    "Á•ûÁµåÁóáÂÇæÂêë": {"mean": 9.21, "std": 2.48}
}

def calculate_big5_scores(answers):
    """Big5„Çπ„Ç≥„Ç¢„ÇíË®àÁÆó„Åô„ÇãÈñ¢Êï∞"""
    scores = {
        "Â§ñÂêëÊÄß": (answers[0] + (8 - answers[5])) / 2,
        "ÂçîË™øÊÄß": ((8 - answers[1]) + answers[6]) / 2,
        "Ë™†ÂÆüÊÄß": (answers[2] + (8 - answers[7])) / 2,
        "Á•ûÁµåÁóáÂÇæÂêë": (answers[3] + (8 - answers[8])) / 2,
        "ÈñãÊîæÊÄß": (answers[4] + (8 - answers[9])) / 2
    }
    return scores

def create_radar_chart(scores):
    """„É¨„Éº„ÉÄ„Éº„ÉÅ„É£„Éº„Éà„Çí‰ΩúÊàê„Åô„ÇãÈñ¢Êï∞"""
    lang = st.session_state.language
    categories = [TRAIT_NAMES[lang][trait] for trait in scores.keys()]
    values = list(scores.values())
    
    fig = go.Figure()
    
    # „Çπ„Ç≥„Ç¢„ÅÆ„Éó„É≠„ÉÉ„Éà
    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name=CONTENT[lang]['chart_your_score']
    ))
    
    # Âπ≥ÂùáÂÄ§„ÅÆ„Éó„É≠„ÉÉ„Éà
    mean_values = [population_stats[cat]["mean"] for cat in scores.keys()]
    fig.add_trace(go.Scatterpolar(
        r=mean_values,
        theta=categories,
        fill='toself',
        name=CONTENT[lang]['chart_average']
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[2, 14]
            )
        ),
        showlegend=True
    )
    
    return fig

def show_language_selection():
    """Ë®ÄË™ûÈÅ∏Êäû„Éö„Éº„Ç∏„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞"""
    st.title("üåê Ë®ÄË™ûÈÅ∏Êäû / Language Selection")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("Êó•Êú¨Ë™û", type="primary", key="ja"):
            st.session_state.language = 'ja'
            st.session_state.page = 'welcome'
            st.rerun()
    
    with col2:
        if st.button("English", type="primary", key="en"):
            st.session_state.language = 'en'
            st.session_state.page = 'welcome'
            st.rerun()

def show_welcome_page():
    """„Ç¶„Çß„É´„Ç´„É†„Éö„Éº„Ç∏„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞"""
    lang = st.session_state.language
    content = CONTENT[lang]
    
    st.title(content['title'])
    st.write(content['welcome_text'])
    
    if st.button(content['start_button'], type="primary"):
        st.session_state.page = 'test'
        st.rerun()

def show_test_page():
    """„ÉÜ„Çπ„Éà„Éö„Éº„Ç∏„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞"""
    lang = st.session_state.language
    content = CONTENT[lang]
    
    # „Éó„É≠„Ç∞„É¨„Çπ„Éê„Éº„ÅÆË°®Á§∫
    progress = st.progress(st.session_state.current_question / 10)
    st.write(f"{content['question_prefix']} {st.session_state.current_question + 1}/10")
    
    # ÁèæÂú®„ÅÆË≥™Âïè„ÇíË°®Á§∫
    current_q = content['questions'][st.session_state.current_question]
    st.write(f"### {current_q}")
    
    # ÈÅ∏ÊäûËÇ¢„ÅÆË°®Á§∫
    answer = st.radio(
        content['select_answer'],
        options=list(range(1, 8)),
        format_func=lambda x: f"{x}. {content['options'][x]}",
        key=f"q_{st.session_state.current_question}"
    )
    
    # „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥„Éú„Çø„É≥
    col1, col2 = st.columns(2)
    
    with col1:
        if st.session_state.current_question > 0:
            if st.button(content['prev_button']):
                st.session_state.current_question -= 1
                st.rerun()
    
    with col2:
        if st.session_state.current_question < 9:
            if st.button(content['next_button']):
                st.session_state.answers[st.session_state.current_question] = answer
                st.session_state.current_question += 1
                st.rerun()
        else:
            if st.button(content['show_results']):
                st.session_state.answers[st.session_state.current_question] = answer
                st.session_state.page = 'results'
                st.rerun()

def show_results_page():
    """ÁµêÊûú„Éö„Éº„Ç∏„ÇíË°®Á§∫„Åô„ÇãÈñ¢Êï∞"""
    lang = st.session_state.language
    content = CONTENT[lang]
    
    st.write(content['results_title'])
    
    # Big5„Çπ„Ç≥„Ç¢„ÅÆË®àÁÆó
    scores = calculate_big5_scores(st.session_state.answers)
    
    # „É¨„Éº„ÉÄ„Éº„ÉÅ„É£„Éº„Éà„ÅÆË°®Á§∫
    st.plotly_chart(create_radar_chart(scores))
    
    # ÂêÑÂõ†Â≠ê„ÅÆ„Çπ„Ç≥„Ç¢„Å®Ëß£Èáà„ÅÆË°®Á§∫
    st.write(f"### {content['detailed_interpretation']}")
    for ja_factor, score in scores.items():
        factor = TRAIT_NAMES[lang][ja_factor]
        mean = population_stats[ja_factor]["mean"]
        std = population_stats[ja_factor]["std"]
        evaluation, emoji = get_score_evaluation(score, mean, std)
        
        st.write(f"#### {factor} {emoji}")
        col1, col2 = st.columns([1, 2])
        
        with col1:
            # „Çπ„Ç≥„Ç¢„ÅÆË°®Á§∫
            st.metric(
                content['your_score'],
                f"{score:.1f}",
                f"{content['diff_from_mean']}: {score - mean:.1f}"
            )
            st.write(f"**{content['evaluation']}**: {evaluation}")
            st.write(f"**{content['mean']}**: {mean:.1f} ¬± {std:.1f}")
        
        with col2:
            # Ëß£Èáà„ÅÆË°®Á§∫
            st.write(content['traits'][factor])
    
    # „ÉÜ„Çπ„ÉàÂÜçÂÆüÊñΩ„Éú„Çø„É≥
    if st.button(content['retry_button']):
        st.session_state.page = 'welcome'
        st.session_state.current_question = 0
        st.session_state.answers = [None] * 10
        st.rerun()

def main():
    """„É°„Ç§„É≥Èñ¢Êï∞"""
    if st.session_state.language is None:
        show_language_selection()
    elif st.session_state.page == 'welcome':
        show_welcome_page()
    elif st.session_state.page == 'test':
        show_test_page()
    else:  # results
        show_results_page()

if __name__ == "__main__":
    main()
